<?php

namespace App\Extra;

use App\Extra\Contracts\Preset;
use App\Exceptions\CBT\PresetNotFoundException;

class CBT
{
    /**
     * used for storing config
     */
    const CONFIG_PREFIX = 'cbt.rules.';

    /**
     * @var array
     */
    private array $presets;

    /**
     * CBT constructor.
     *
     * @param array $presets
     */
    public function __construct($presets = [])
    {
        foreach ($presets as $class) {
            /**
             * @var $preset Preset
             */
            $preset = new $class();

            $this->presets[$preset->getName()] = $preset;

            $preset->registerConfig($this);
        }
    }

    /**
     * Return preset.
     *
     * @param null $presetName
     * @return \App\Extra\Contracts\Preset
     * @throws \Throwable
     */
    public function getPreset($presetName = null): Preset
    {
        $presetName = $presetName ?? config('cbt.default');

        throw_if(! $this->presets[$presetName], PresetNotFoundException::class);

        return $this->presets[$presetName];
    }

    /**
     * Set a given configuration value.
     *
     * @param string $key
     * @param mixed $value
     * @return void
     */
    public function setConfig(string $key, array $value): void
    {
        config()->set(self::CONFIG_PREFIX.$key, $value);
    }

    /**
     * Return config after generated by each presets.
     *
     * @param string $config
     * @param null $default
     * @return mixed
     */
    public function getConfig(string $config, $default = null): mixed
    {
        return config(self::CONFIG_PREFIX.$config, $default);
    }
}
